-- ServerScript in ServerScriptService

-- Import necessary services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

-- Secure whitelist: Use UserIds for security
local WHITELIST = {
    [123456789] = true,  -- Replace with actual UserIds
    [987654321] = true
}

-- Function to kick or crash the player (set position to math.huge)
local function crashOrKick(player)
    -- Check if the player has a character and set its position to math.huge
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- Set player's position to math.huge (out of bounds)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(math.huge, math.huge, math.huge)
    end
    
    -- Alternatively, you can kick the player if you'd rather not crash
    -- player:Kick("Access denied. You are not whitelisted.")
end

-- Anti-tamper check: Handles unauthorized remotes
local function validateRemote(player, data)
    if not WHITELIST[player.UserId] then
        player:Kick("Security violation detected. Unauthorized action.")
        return false
    end

    -- Add any additional sanity checks for the data here (e.g., correct format or values)
    return true
end

-- Function for client ID verification (here using UserId and AccountType as an example)
local function clientIDVerification(player)
    local isVerified = false

    -- Check if the player is whitelisted by UserId
    if WHITELIST[player.UserId] then
        -- Further verification based on account type or other criteria
        if player.AccountType == Enum.AccountType.Premium then
            -- For example: Only allow Premium players for extra verification (adjust as needed)
            isVerified = true
        else
            warn(player.Name .. " does not have a Premium account. Verification failed.")
            player:Kick("Access denied. Premium membership required.")
        end
    else
        warn("Unauthorized user attempted to join: " .. player.Name .. " (UserId: " .. player.UserId .. ")")
        player:Kick("Access denied. You are not whitelisted.")
    end

    return isVerified
end

-- Check if HttpGet function is hooked
local function isHttpGetHooked()
    -- Check if game.HttpGet is modified
    local originalHttpGet = game.HttpGet
    local hookedHttpGet = game.HttpGet

    -- Compare the functions to see if they've been tampered with
    if hookedHttpGet ~= originalHttpGet then
        return true
    end
    return false
end

-- Function to freeze the game (or crash it) if HttpGet is hooked
local function handleHookedHttp()
    while true do
        -- Infinite loop to freeze the game if HttpGet is hooked
        wait(1)  -- Check every second, you can adjust the interval
        print("HttpGet function is hooked! Freezing game...")
    end
end

-- Initialize the whitelist check and client ID verification when the player joins the game
Players.PlayerAdded:Connect(function(player)
    -- Check if HttpGet is hooked and handle it
    if isHttpGetHooked() then
        print("HttpGet is hooked. Freezing the game.")
        handleHookedHttp()  -- This will "freeze" the game
    else
        -- Proceed with normal player verification if HttpGet is not hooked
        if clientIDVerification(player) then
            print(player.Name .. " is verified and allowed to join.")
        else
            crashOrKick(player)
        end
    end
end)

-- Create a RemoteEvent to handle secure server-client communication
local remoteEvent = Instance.new("RemoteEvent")
remoteEvent.Name = "SecureRemoteEvent"
remoteEvent.Parent = ReplicatedStorage

-- Example of secure remote validation (for communication between server and clients)
remoteEvent.OnServerEvent:Connect(function(player, data)
    if not validateRemote(player, data) then
        return
    end

    -- Proceed with normal processing if the user is validated
    print(player.Name .. " sent valid data: " .. tostring(data))
end)

-- Optional: Create a module for easier whitelist management
local whitelistModule = {}

whitelistModule.Whitelist = WHITELIST

return whitelistModule

local library =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/iblameaabis/Ililililililililililililil/refs/heads/main/W%20UI", true))()

local window = library:AddWindow("V3", {
    main_color = Color3.fromRGB(0, 0, 0),
    min_size = Vector2.new(610, 520),
    can_resize = false,
})

local tab = window:AddTab("FarmV2")
tab:Show()
